Notes On AWS Deployment


To Create RDS Instance:
1. Create a group and group policies (for example, we need EC2 Full Access and RDS Full Access)
2. Create user and add the user to the group. When a user is created, AWS will give you an “Access Key ID” and a “Secret Access Key” in a csv. file)
3. Make sure you’re in the correct location/region in AWS.
4. Create an RDS instance, selecting PostgreSQL and check the box of “Free tier only”.
5. In “Specify DB details”, you will see that the “DB instance class” shows t2.micro; t2.micro is one of the smallest unit of AWS RDS.
6. In “Configure advanced settings”, “Public accessibility”, choose “Yes”.
7. “In VPC security groups”, choose “Create new VPC security group”. A VPC security group is where we set the in-bound and out-bound rules.
8. In “Performance Insights”, choose “Disable Performance Insights”.
9. In “Log exports”, check “Postgresql log” and “Upgrade log”.
10. Uncheck “Enable deletion protection”, and then “Create database”.


To Create EC2 Instance:
- EC2 is where we put Nginx and Gunicorn live.
1. Make sure you’re in the correct location/region in AWS.
2. Create a new EC2 instance, choose Ubuntu-18 Free tier.
3. Under “Add Tags”, add “Key” to be “Name” and “Value” to be “Wizard”. It is where we name this instance.
4. Under “Configure Security Group”, create a new security group here and then make RDS to have the same security group, so the EC2 and RDS instances can talk to each other. You can name the security group whatever you like.
5. Continue to configure the in-bound and out-bound rules of the new security group.
    - SSH; TCP; 22; Anywhere
    - HTTP; TCP; 80; Anywhere
    - PostgreSQL; TCP; 5432; Anywhere
6. “Review and launch”. “Launch”.
7. AWS will give you a key pair; download the key pair pem file.
8. Launch the instance.
9. Go see the detail of the new instance, record the DNS and the security group ID.
10. Go to the RDS instance, click on “Modify”. Remove its default security group and set it to be the same security group as the EC2 instance using the security group ID. Click “Continue”. Check box “Apply immediately” and then “Modify DB Instane”.


To Create S3 Bucket:
1. <Create new bucket>.
2. Select security settings.
3. Manually upload a file via the AWS website; click into the saved file to obtain format of the IP address that a file will be saved in this bucket.
4. Remember to add “S3 Full Access” to your group policy.


To Set Up <ssh>:
- ssh is a command that let you secure a shell into another machine.
1. Inside your .ssh folder, <mv ~/Downloads/(name).pem ./>
2. To make the file readable only, <chmod 400 (name).pem>
3. <ls -l> to check the status
4. <sudo nano config> to edit the config file:
    - Host: the name you will type to ssh into the server
    - Hostname: (your EC2 DNS)
    - User: Ubuntu
    - IdentifyFile: ~/.ssh/(name).pem
5. <control + X>, <Yes>, and <Enter> to save


To Start ssh in Ubuntu:
1. <ssh (host)>; answer “yes”
2. <which python3> to see that your python3 has been installed
3. <git --version> to see that your git has been installed
4. Follow the class tutorial: https://github.com/codefellows/seattle-python-401d10/blob/master/class-09-deployment/notes/deployment.md
*  When <pip3 install -r requirements.txt>, DO NOT run <pip install …> because they will give you the wrong version. Also DO NOT use <sudo> to pip install because it will install the packages as the root user of the Linux machine and cause permission issues. <pip install…> will install as the Ubuntu user.
*  When <sudo nano /etc/nginx/conf.d/(project_name).conf> to add a project-specific config to the nginx, put <http://127.0.0.1:8000;> to <proxy_pass>. This is the most important line of the file, which tells nginx where to send the request . When we hear a request from port 80 (HTTP), the request is then sent to port 8000 running on local. The rest of this file is to configure the proxy to retain hearder data from the request.

        # (program name).conf
        upstream (program name) {
            server 127.0.0.1:8000;
        }

        server {
            listen 80;

            server_name (EC2 Public DNS);

            access_log  /home/ubuntu/.local/nginx.access.log;

            location / {
                proxy_set_header        Host $http_host;
                proxy_set_header        X-Real-IP $remote_addr;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header        X-Forwarded-Proto $scheme;

                client_max_body_size    10m;
                client_body_buffer_size 128k;
                proxy_connect_timeout   60s;
                proxy_send_timeout      90s;
                proxy_read_timeout      90s;
                proxy_buffering         off;
                proxy_temp_file_write_size 64k;
                proxy_pass http://127.0.0.1:8000;
                proxy_redirect          off;
            }
        }












